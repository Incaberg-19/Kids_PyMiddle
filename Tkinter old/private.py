class User1:
    def __init__(self):
        self.passw='123'

class User2:
    def __init__(self):
        self._passw='123'
#Это считается "частично приватным" атрибутом по соглашению.
#Хотя технически он все еще доступен извне класса,
# другие разработчики должны считать его внутренним и не
# рекомендуются к прямому обращению.




class User3:
    def __init__(self):
        self._newpass='456'
        self.__passw='123'
    def getPass(self):
        return self.__passw
# Это пытается сделать атрибут приватным.
# Однако Python не предоставляет настоящего механизма приватности
# для атрибутов. Вместо этого Python применяет манипуляцию
# именования, скрывая атрибут внутри класса.

a,b,c=User1(),User2(),User3()
# print(a.__newpass)
# print(a.passw)
# print(b._passw)
print(a._User3__passw)
# print(c.__passw)

print(c.__dict__)
print(c.getPass())

# Помните, что в Python нет настоящего механизма приватности,
# поэтому эти префиксы используются только как соглашения между
# разработчиками.