# Класс — абстрактное описание какого-либо объекта.
# Животное. У него есть голос, имя, здоровье (если мы говорим о хп)
# Давайте создадим класс животного.
class Animal():
    def __init__(self,name):
        # волшебный метод который срабатывает при создании экземпляра
        # self - параметр который ссылается на себя
        self._name = name # записываем в класс аттрибут(переменную)
        # name полученную в будущем при создании экземпляра класса
        # Экземпляр класса — это объект, созданный по описанию класса.
        # нижнее подчёркивание показывает приватность. По идеи к этому
        # атрибуту (переменной) нельзя получить доступ вне класса,
        # но в пайтон это лишь условное обозначение так как приватность
        # в этом языке не реализована
# символ _ для обозначения полей и методов, которые предназначены только для
# внутреннего использования внутри класса. Доступ к таким полям осуществляется через
# специальные методы акссесоры, это методы, которые позволяют получить доступ к
# приватным полям и методам. Такой подход позволяет четко контролировать,
# как будут использоваться поля и методы класса при его реализации. 
dog1=Animal('Шарик')
dog2=Animal('Варик')
print(dog1._name) # плохая практика

class Animal():
    _voice_message = " Голос"
    def __init__(self,name):
        self._name = name
    def voice(self):
        voice = self._name + self._voice_message
        print(voice)
    def name(self): 
        print(self._name)

dog3=Animal('Бобик')
dog3.name() # хорошая практика
dog3.voice()

dog4=Animal('Масик')
dog4.voice()

class Animal():
    _voice_message = " Голос"
    def __init__(self,name):
        self._name = name
    def voice(self):
        voice = self._name + self._voice_message
        print(voice)

class Dog(Animal):
    _voice_message = " Гав-Гав"
# методы  прошлого класса наследуются, а атрибут изменяется

dog1=Dog('Карик')
dog1.voice()

# мы можем обращаться к родительскому классу - его атрибутам и методам
# при помощи команды super()

class Dog(Animal):
    _voice_message = " Гав-Гав"
    def parent_voice(self):
        voice = self._name + super()._voice_message
        print(voice)

dog = Dog("Бобик") # создание экземпляра класса dog с именем Бобик
dog.voice() # вызов метода voice экземпляра класса dog
dog.parent_voice() # вызов метода parent_voice
