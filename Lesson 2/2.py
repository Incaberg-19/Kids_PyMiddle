'''
Шаблон создания функции:
def ИмяФункции(Аргумент1, Аргумент2):

Шаблон создания читаемой функции:
def ИмяФункции(Аргумент1:тип, Аргумент2:тип) -> возвращаемыйТип:

'''
def sayHello():
    print('Hello!')

sayHello() # вызов функции (обращение по имени и скобочки)
print(  sayHello()   ) # None - эта функция ничего не возвращает

def sayHello2():
    return 'Hello!' # return - вернуть значение

sayHello2() # значение вернулось и никуда не записалось
var = sayHello2() # теперь мы записали возвращаемое 'Hello!' в var
print(var) # выведется 'Hello!'

# Функция для подсчёта суммы цифр в строке.
def amountInString(string):
    amount=0
    for sym in string:
        amount+=int(sym)
    return amount

# Ещё одна такая же функция с более явным указанием
# что она принимает и возвращает
def amountInString2(string:str) -> int:
    amount=0
    for sym in string:
        amount+=int(sym)
    return amount

print(amountInString('123')) # вывод один и тот же
print(amountInString2('123')) # вывод один и тот же

''' 
Для чего мы используем явные указания?
Представьте себе огромную IT компанию. В одном её приложении миллион строчек кода.
Приходит новый разработчик работать со старым кодом. И видит этот кошмар.
И в этом кошмаре ему будет намного легче разбираться если мы о нём позаботимся - 
Укажем какие типы аргументов принимаются и какой тип из функции возвращается.
По хорошему ещё написать что делает эта функция используя, соответственно,
инструменты для комментариев - #, \''' ... \'''. Таких инструментов много и пока что,
вам достаточно знать только эти. 
'''